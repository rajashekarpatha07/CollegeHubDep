<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>College Hub - Notices</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        @keyframes slideFade {
            0% {
              opacity: 0;
              transform: translateY(-20px);
            }
            100% {
              opacity: 1;
              transform: translateY(0);
            }
        }
          
        body {
            background-color: #f3f4f6;
            font-family: 'Inter', system-ui, -apple-system, sans-serif;
            transition: all 0.3s ease;
        }
        .sidebar {
            background: linear-gradient(to bottom, #1e3a8a, #3b82f6);
            box-shadow: 4px 0 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        .notice-card {
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s, box-shadow 0.2s;
            border-left: 4px solid transparent;
        }
        .notice-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }
        .notice-card.urgent {
            border-left-color: #ef4444;
        }
        .notice-card.important {
            border-left-color: #f59e0b;
        }
        .notice-card.info {
            border-left-color: #3b82f6;
        }
        .animate-fade-in {
            animation: fadeIn 0.6s ease-out;
        }
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(15px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        /* Loading indicator */
        .loading {
            display: flex;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.8);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* Filter tags */
        .filter-tag {
            background-color: #e0e7ff;
            color: #4338ca;
            border-radius: 9999px;
            padding: 0.25rem 0.75rem;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.2s;
        }
        .filter-tag:hover, .filter-tag.active {
            background-color: #4338ca;
            color: white;
        }
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                z-index: 40;
                width: 250px;
                left: -250px;
                height: 100%;
            }
            .sidebar.open {
                left: 0;
            }
            .overlay {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.5);
                z-index: 30;
            }
            .overlay.active {
                display: block;
            }
        }
    </style>
</head>
<body class="min-h-screen">
    <!-- Loading indicator -->
    <div id="loading" class="loading">
        <div class="loading-spinner"></div>
    </div>

    <!-- Mobile menu toggle button -->
    <button id="menuToggle" class="fixed top-4 left-4 bg-indigo-600 text-white p-2 rounded-lg z-50 shadow-lg md:hidden">
        <i class="fas fa-bars"></i>
    </button>

    <!-- Overlay for mobile -->
    <div id="overlay" class="overlay"></div>

    <div class="flex h-screen">
        <!-- Sidebar -->
        <div id="sidebar" class="sidebar w-64 p-6 text-white flex flex-col">
            <div class="flex items-center mb-10">
                <i class="fas fa-book-open text-3xl"></i>
                <h1 class="text-xl font-bold ml-3">College Hub</h1>
            </div>
            
            <nav class="flex-grow">
                <ul class="space-y-3">
                    <li class="p-3 rounded-lg hover:bg-white hover:bg-opacity-10 transition">
                        <a href="/dashboard" class="flex items-center" aria-label="Dashboard">
                            <i class="fas fa-home w-5" aria-hidden="true"></i>
                            <span class="ml-3">Dashboard</span>
                        </a>
                    </li>
                    <li class="p-3 rounded-lg hover:bg-white hover:bg-opacity-10 transition">
                        <a href="/notes" class="flex items-center" aria-label="View notes">
                            <i class="fas fa-book w-5" aria-hidden="true"></i>
                            <span class="ml-3">Notes</span>
                        </a>
                    </li>
                    <li class="p-3 rounded-lg hover:bg-white hover:bg-opacity-10 transition">
                        <a href="/questionpapers" class="flex items-center" aria-label="View question papers">
                            <i class="fas fa-file-alt w-5" aria-hidden="true"></i>
                            <span class="ml-3">Question Papers</span>
                        </a>
                    </li>
                    <li class="p-3 rounded-lg bg-white bg-opacity-20">
                        <a href="/notices" class="flex items-center" aria-label="View notices">
                            <i class="fas fa-bell w-5" aria-hidden="true"></i>
                            <span class="ml-3">Notices</span>
                        </a>
                    </li>
                </ul>
            </nav>
            
            <div class="mt-auto">
                <form id="logoutForm" action="/api/v1/students/logout" method="POST">
                    <button type="submit" class="w-full p-3 rounded-lg bg-red-500 hover:bg-red-600 transition flex items-center justify-center" aria-label="Logout">
                        <i class="fas fa-sign-out-alt w-5" aria-hidden="true"></i>
                        <span class="ml-2">Logout</span>
                    </button>
                </form>
            </div>
        </div>
        
        <!-- Main Content -->
        <div class="flex-grow p-4 md:p-8 overflow-y-auto ml-0 md:ml-64">
            <!-- Top bar -->
            <div class="flex justify-between items-center mb-6 md:mb-8 mt-10 md:mt-0">
                <h1 class="text-xl md:text-2xl font-bold text-gray-800">Important Notices</h1>
                <div class="flex items-center">
                    <span class="text-gray-600 mr-2 md:mr-4 hidden sm:inline">Welcome, <%= student?.name || 'Student' %></span>
                    <div class="bg-indigo-600 text-white w-8 h-8 md:w-10 md:h-10 rounded-full flex items-center justify-center">
                        <span><%= student?.name?.charAt(0) || 'S' %></span>
                    </div>
                </div>
            </div>
            
            <!-- Filter and Search Section -->
            <div class="bg-white rounded-lg shadow p-4 mb-6 animate-fade-in">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-4">
                    <h2 class="text-lg font-semibold text-gray-800">Filter Notices</h2>
                    <div class="relative">
                        <input id="searchInput" type="text" placeholder="Search notices..." class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg w-full md:w-64 focus:ring-indigo-500 focus:border-indigo-500">
                        <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Branch Filter -->
                    <div>
                        <label for="branchFilter" class="block text-sm font-medium text-gray-700 mb-1">Branch</label>
                        <select id="branchFilter" class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                            <option value="">All Branches</option>
                            <option value="CSE">CSE</option>
                            <option value="ECE">ECE</option>
                            <option value="EEE">EEE</option>
                            <option value="MECH">MECH</option>
                            <option value="CIVIL">CIVIL</option>
                            <option value="IT">IT</option>
                            <option value="CSC">CSC</option>
                            <option value="DS">DS</option>
                        </select>
                    </div>
                    
                    <!-- Batch Year Filter -->
                    <div>
                        <label for="batchFilter" class="block text-sm font-medium text-gray-700 mb-1">Batch Year</label>
                        <select id="batchFilter" class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                            <option value="">All Batches</option>
                            <option value="23">2023</option>
                            <option value="22">2022</option>
                            <option value="21">2021</option>
                            <option value="20">2020</option>
                        </select>
                    </div>
                </div>
                
                <!-- Time View Buttons -->
                <div class="mt-4 flex flex-wrap gap-2">
                    <button id="allTime" class="filter-tag active">All Notices</button>
                    <button id="thisWeek" class="filter-tag">This Week</button>
                    <button id="thisMonth" class="filter-tag">This Month</button>
                    <button id="upcoming" class="filter-tag">Upcoming Events</button>
                </div>
            </div>
            
            <!-- Notices Container -->
            <div id="noticesContainer" class="space-y-4 animate-fade-in">
                <!-- Notices will be dynamically populated here -->
                <div class="notice-card p-4 flex flex-col">
                    <div class="animate-pulse">
                        <div class="h-5 bg-gray-200 rounded w-3/4 mb-4"></div>
                        <div class="h-4 bg-gray-200 rounded w-1/2 mb-6"></div>
                        <div class="h-3 bg-gray-200 rounded w-full mb-2"></div>
                        <div class="h-3 bg-gray-200 rounded w-5/6 mb-2"></div>
                    </div>
                </div>
                
                <div class="notice-card p-4 flex flex-col">
                    <div class="animate-pulse">
                        <div class="h-5 bg-gray-200 rounded w-3/4 mb-4"></div>
                        <div class="h-4 bg-gray-200 rounded w-1/2 mb-6"></div>
                        <div class="h-3 bg-gray-200 rounded w-full mb-2"></div>
                        <div class="h-3 bg-gray-200 rounded w-5/6 mb-2"></div>
                    </div>
                </div>
            </div>
            
            <!-- Empty State -->
            <div id="emptyState" class="hidden text-center py-12 animate-fade-in">
                <div class="mx-auto w-24 h-24 flex items-center justify-center rounded-full bg-gray-100 mb-6">
                    <i class="fas fa-bell-slash text-3xl text-gray-400"></i>
                </div>
                <h3 class="text-xl font-semibold text-gray-700 mb-2">No Notices Found</h3>
                <p class="text-gray-500 max-w-md mx-auto">There are currently no notices matching your criteria. Try adjusting your filters or check back later.</p>
            </div>
        </div>
    </div>

    <!-- Notice Detail Modal -->
    <div id="noticeModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl overflow-hidden">
            <div class="p-4 border-b flex justify-between items-center">
                <h3 id="modalTitle" class="text-lg font-bold text-gray-800">Notice Title</h3>
                <button id="closeModal" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-6">
                <div class="mb-6">
                    <div class="flex flex-wrap items-center gap-3 mb-4">
                        <div class="bg-blue-100 text-blue-800 text-xs font-semibold px-2.5 py-0.5 rounded-full">
                            <span id="modalBranch">Branch</span>
                        </div>
                        <div class="bg-purple-100 text-purple-800 text-xs font-semibold px-2.5 py-0.5 rounded-full">
                            <span id="modalBatch">Batch</span>
                        </div>
                        <div class="bg-green-100 text-green-800 text-xs font-semibold px-2.5 py-0.5 rounded-full flex items-center">
                            <i class="fas fa-calendar-alt mr-1"></i>
                            <span id="modalDate">Date</span>
                        </div>
                    </div>
                    <p class="text-sm text-gray-600 mb-2">Posted by: <span id="modalPoster" class="font-medium"></span></p>
                    <p id="modalDescription" class="text-gray-700 mt-4 whitespace-pre-line"></p>
                </div>
                
                <div id="modalExpiry" class="text-sm text-red-600 flex items-center mt-4">
                    <i class="fas fa-clock mr-2"></i>
                    <span>Expires on: </span>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Mobile menu toggle
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('overlay');

        menuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('open');
            overlay.classList.toggle('active');
        });

        overlay.addEventListener('click', () => {
            sidebar.classList.remove('open');
            overlay.classList.remove('active');
        });
        
        // Notices data and UI management
        let allNotices = [];
        let filteredNotices = [];
        
        // DOM elements
        const noticesContainer = document.getElementById('noticesContainer');
        const emptyState = document.getElementById('emptyState');
        const searchInput = document.getElementById('searchInput');
        const branchFilter = document.getElementById('branchFilter');
        const batchFilter = document.getElementById('batchFilter');
        const timeFilterButtons = document.querySelectorAll('.filter-tag');
        const loading = document.getElementById('loading');
        
        // Modal elements
        const noticeModal = document.getElementById('noticeModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalBranch = document.getElementById('modalBranch');
        const modalBatch = document.getElementById('modalBatch');
        const modalDate = document.getElementById('modalDate');
        const modalPoster = document.getElementById('modalPoster');
        const modalDescription = document.getElementById('modalDescription');
        const modalExpiry = document.getElementById('modalExpiry');
        const closeModal = document.getElementById('closeModal');
        
        // Time filter buttons
        const allTimeBtn = document.getElementById('allTime');
        const thisWeekBtn = document.getElementById('thisWeek');
        const thisMonthBtn = document.getElementById('thisMonth');
        const upcomingBtn = document.getElementById('upcoming');
        
        // Fetch notices data
        async function fetchNotices() {
            try {
                loading.style.display = 'flex';
                
                const response = await fetch('/api/v1/students/getnotices');
                if (!response.ok) {
                    throw new Error('Failed to fetch notices');
                }
                
                const data = await response.json();
                allNotices = data.data || [];
                filteredNotices = [...allNotices];
                
                // Initial rendering
                renderNotices();
            } catch (error) {
                console.error('Error fetching notices:', error);
                showErrorMessage('Failed to load notices. Please try again later.');
            } finally {
                loading.style.display = 'none';
            }
        }
        
        // Format date
        function formatDate(dateString) {
            const options = { year: 'numeric', month: 'short', day: 'numeric' };
            return new Date(dateString).toLocaleDateString(undefined, options);
        }
        
        // Calculate time difference
        function getTimeDifference(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffInMs = Math.abs(date - now);
            const diffInDays = Math.ceil(diffInMs / (1000 * 60 * 60 * 24));
            
            if (diffInDays === 0) {
                return 'Today';
            } else if (diffInDays === 1) {
                return 'Yesterday';
            } else if (diffInDays < 7) {
                return `${diffInDays} days ago`;
            } else if (diffInDays < 30) {
                const weeks = Math.floor(diffInDays / 7);
                return `${weeks} ${weeks === 1 ? 'week' : 'weeks'} ago`;
            } else if (diffInDays < 365) {
                const months = Math.floor(diffInDays / 30);
                return `${months} ${months === 1 ? 'month' : 'months'} ago`;
            } else {
                return formatDate(dateString);
            }
        }
        
        // Render notices
        function renderNotices() {
            noticesContainer.innerHTML = '';
            
            if (filteredNotices.length === 0) {
                emptyState.classList.remove('hidden');
                return;
            }
            
            emptyState.classList.add('hidden');
            
            filteredNotices.forEach(notice => {
                const card = document.createElement('div');
                
                // Determine notice priority class
                let priorityClass = 'info';
                if (notice.title.toLowerCase().includes('urgent')) {
                    priorityClass = 'urgent';
                } else if (notice.title.toLowerCase().includes('important')) {
                    priorityClass = 'important';
                }
                
                card.className = `notice-card p-5 animate-fade-in ${priorityClass}`;
                
                const createdDate = new Date(notice.createdAt);
                const timeAgo = getTimeDifference(createdDate);
                
                card.innerHTML = `
                    <div class="flex justify-between items-start">
                        <h3 class="text-lg font-semibold text-gray-800">${notice.title}</h3>
                        <span class="text-xs text-gray-500">${timeAgo}</span>
                    </div>
                    <div class="flex items-center mt-2 mb-3">
                        <span class="text-xs bg-blue-100 text-blue-800 font-medium px-2.5 py-0.5 rounded-full mr-2">${notice.branch}</span>
                        <span class="text-xs bg-purple-100 text-purple-800 font-medium px-2.5 py-0.5 rounded-full">Batch ${notice.batchyear}</span>
                    </div>
                    <p class="text-gray-600 line-clamp-2 mb-3">${notice.description}</p>
                    <div class="flex justify-between items-center mt-2">
                        <span class="text-xs text-gray-500">Posted by: ${notice.postedBy}</span>
                        <button class="view-notice text-indigo-600 hover:underline text-sm flex items-center">
                            <span>Read More</span>
                            <i class="fas fa-chevron-right ml-1 text-xs"></i>
                        </button>
                    </div>
                `;
                
                card.querySelector('.view-notice').addEventListener('click', () => {
                    openNoticeModal(notice);
                });
                
                noticesContainer.appendChild(card);
            });
        }
        
        // Open notice modal
        function openNoticeModal(notice) {
            modalTitle.textContent = notice.title;
            modalBranch.textContent = notice.branch;
            modalBatch.textContent = `Batch ${notice.batchyear}`;
            modalDate.textContent = formatDate(notice.createdAt);
            modalPoster.textContent = notice.postedBy;
            modalDescription.textContent = notice.description;
            
            // Show expiry date if available
            if (notice.expiresAt) {
                modalExpiry.innerHTML = `
                    <i class="fas fa-clock mr-2"></i>
                    <span>Expires on: ${formatDate(notice.expiresAt)}</span>
                `;
                modalExpiry.classList.remove('hidden');
            } else {
                modalExpiry.classList.add('hidden');
            }
            
            noticeModal.classList.remove('hidden');
        }
        
        // Close notice modal
        closeModal.addEventListener('click', () => {
            noticeModal.classList.add('hidden');
        });
        
        // Close modal when clicking outside
        noticeModal.addEventListener('click', (e) => {
            if (e.target === noticeModal) {
                noticeModal.classList.add('hidden');
            }
        });
        
        // Filter by time
        function filterByTime(period) {
            const now = new Date();
            
            if (period === 'all') {
                filteredNotices = [...allNotices];
            } else if (period === 'week') {
                // Get notices from the past week
                const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                filteredNotices = allNotices.filter(notice => new Date(notice.createdAt) >= oneWeekAgo);
            } else if (period === 'month') {
                // Get notices from the past month
                const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                filteredNotices = allNotices.filter(notice => new Date(notice.createdAt) >= oneMonthAgo);
            } else if (period === 'upcoming') {
                // Get notices that haven't expired yet
                filteredNotices = allNotices.filter(notice => !notice.expiresAt || new Date(notice.expiresAt) > now);
            }
            
            applyFilters();
        }
        
        // Apply filter and search
        function applyFilters() {
            let filtered = [...filteredNotices];
            
            const searchTerm = searchInput.value.toLowerCase();
            const branch = branchFilter.value;
            const batch = batchFilter.value;
            
            if (searchTerm) {
                filtered = filtered.filter(notice => 
                    notice.title.toLowerCase().includes(searchTerm) ||
                    notice.description.toLowerCase().includes(searchTerm)
                );
            }
            
            if (branch) {
                filtered = filtered.filter(notice => notice.branch === branch);
            }
            
            if (batch) {
                filtered = filtered.filter(notice => notice.batchyear.toString() === batch);
            }
            
            filteredNotices = filtered;
            renderNotices();
        }
        
        // Event listeners for time filter buttons
        allTimeBtn.addEventListener('click', () => {
            timeFilterButtons.forEach(btn => btn.classList.remove('active'));
            allTimeBtn.classList.add('active');
            filterByTime('all');
        });
        
        thisWeekBtn.addEventListener('click', () => {
            timeFilterButtons.forEach(btn => btn.classList.remove('active'));
            thisWeekBtn.classList.add('active');
            filterByTime('week');
        });
        
        thisMonthBtn.addEventListener('click', () => {
            timeFilterButtons.forEach(btn => btn.classList.remove('active'));
            thisMonthBtn.classList.add('active');
            filterByTime('month');
        });
        
        upcomingBtn.addEventListener('click', () => {
            timeFilterButtons.forEach(btn => btn.classList.remove('active'));
            upcomingBtn.classList.add('active');
            filterByTime('upcoming');
        });
        
        // Add event listeners for filters
        searchInput.addEventListener('input', applyFilters);
        branchFilter.addEventListener('change', applyFilters);
        batchFilter.addEventListener('change', applyFilters);
        
        // Error message
        function showErrorMessage(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-3 rounded-lg shadow-lg z-50 animate-fade-in';
            errorDiv.innerHTML = `
                <div class="flex items-center">
                    <i class="fas fa-exclamation-circle mr-2"></i>
                    <span>${message}</span>
                </div>
            `;
            document.body.appendChild(errorDiv);
            
            setTimeout(() => {
                errorDiv.style.opacity = '0';
                errorDiv.style.transform = 'translateY(-20px)';
                errorDiv.style.transition = 'opacity 0.3s, transform 0.3s';
                setTimeout(() => errorDiv.remove(), 300);
            }, 5000);
        }
        
        // Initialize
        document.addEventListener('DOMContentLoaded', fetchNotices);
    </script>
</body>
</html> 